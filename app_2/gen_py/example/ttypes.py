#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import gen_py.utils.ttypes

from thrift.transport import TTransport


class Number(object):
    """
    Attributes:
     - val
    """

    thrift_spec = (
        None,  # 0
        (1, TType.DOUBLE, 'val', None, None, ),  # 1
    )

    def __init__(self, val=None,):
        self.val = val

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.val = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Number')
        if self.val is not None:
            oprot.writeFieldBegin('val', TType.DOUBLE, 1)
            oprot.writeDouble(self.val)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MathCalc(object):
    """
    Attributes:
     - sum
     - dif
     - mul
     - div
    """

    thrift_spec = (
        None,  # 0
        (1, TType.DOUBLE, 'sum', None, None, ),  # 1
        (2, TType.DOUBLE, 'dif', None, None, ),  # 2
        (3, TType.DOUBLE, 'mul', None, None, ),  # 3
        (4, TType.DOUBLE, 'div', None, None, ),  # 4
    )

    def __init__(self, sum=None, dif=None, mul=None, div=None,):
        self.sum = sum
        self.dif = dif
        self.mul = mul
        self.div = div

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.sum = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.dif = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.mul = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.div = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MathCalc')
        if self.sum is not None:
            oprot.writeFieldBegin('sum', TType.DOUBLE, 1)
            oprot.writeDouble(self.sum)
            oprot.writeFieldEnd()
        if self.dif is not None:
            oprot.writeFieldBegin('dif', TType.DOUBLE, 2)
            oprot.writeDouble(self.dif)
            oprot.writeFieldEnd()
        if self.mul is not None:
            oprot.writeFieldBegin('mul', TType.DOUBLE, 3)
            oprot.writeDouble(self.mul)
            oprot.writeFieldEnd()
        if self.div is not None:
            oprot.writeFieldBegin('div', TType.DOUBLE, 4)
            oprot.writeDouble(self.div)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServiceException(TException):
    """
    Attributes:
     - errorCode
     - errorMsg
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'errorCode', None, None, ),  # 1
        (2, TType.STRING, 'errorMsg', 'UTF8', None, ),  # 2
    )

    def __init__(self, errorCode=None, errorMsg=None,):
        self.errorCode = errorCode
        self.errorMsg = errorMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errorMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ServiceException')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.errorMsg is not None:
            oprot.writeFieldBegin('errorMsg', TType.STRING, 2)
            oprot.writeString(self.errorMsg.encode('utf-8') if sys.version_info[0] == 2 else self.errorMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
